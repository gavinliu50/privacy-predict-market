import { ethers } from "hardhat";
import * as fs from "fs";
import * as path from "path";

async function main() {
  console.log("\n🚀 Deploying Price Oracle and Market Factory...");
  console.log("━".repeat(60));

  // Get deployer
  const [deployer] = await ethers.getSigners();
  console.log(`Deployer: ${deployer.address}`);
  console.log(`Balance: ${ethers.formatEther(await ethers.provider.getBalance(deployer.address))} ETH`);
  console.log("━".repeat(60));

  // Step 1: Deploy PriceOracle
  console.log("\n📊 Step 1: Deploying PriceOracle...");
  const PriceOracle = await ethers.getContractFactory("PriceOracle");
  const priceOracle = await PriceOracle.deploy();
  await priceOracle.waitForDeployment();
  const priceOracleAddress = await priceOracle.getAddress();
  
  console.log(`✅ PriceOracle deployed: ${priceOracleAddress}`);
  
  // Check initial prices
  const ethPrice = await priceOracle.prices(0); // ETH
  const btcPrice = await priceOracle.prices(1); // BTC
  const solPrice = await priceOracle.prices(2); // SOL
  
  console.log("\n📈 Initial Prices:");
  console.log(`  ETH: $${(Number(ethPrice.price) / 1e8).toLocaleString()}`);
  console.log(`  BTC: $${(Number(btcPrice.price) / 1e8).toLocaleString()}`);
  console.log(`  SOL: $${(Number(solPrice.price) / 1e8).toLocaleString()}`);
  console.log("━".repeat(60));

  // Step 2: Deploy MarketFactory
  console.log("\n🏭 Step 2: Deploying MarketFactory...");
  const MarketFactory = await ethers.getContractFactory("MarketFactory");
  const marketFactory = await MarketFactory.deploy();
  await marketFactory.waitForDeployment();
  const factoryAddress = await marketFactory.getAddress();
  
  console.log(`✅ MarketFactory deployed: ${factoryAddress}`);
  console.log("━".repeat(60));

  // Step 3: Create a test Event Market
  console.log("\n📝 Step 3: Creating test Event Market...");
  const eventDescription = "Will Bitcoin reach $120,000 by end of 2025?";
  const commitmentDuration = 3600; // 1 hour
  const eventDuration = 3600 * 24; // 24 hours
  
  const tx1 = await marketFactory.createMarket(
    0, // MarketType.Event
    eventDescription,
    commitmentDuration,
    eventDuration,
    ethers.ZeroAddress, // No oracle for event market
    0, // No asset
    0  // No target price
  );
  await tx1.wait();
  
  const eventMarketAddress = await marketFactory.markets(0);
  console.log(`✅ Event Market created: ${eventMarketAddress}`);
  console.log(`   Description: ${eventDescription}`);
  console.log(`   Commitment Duration: ${commitmentDuration / 3600} hour(s)`);
  console.log(`   Event Duration: ${eventDuration / 3600} hour(s)`);
  console.log("━".repeat(60));

  // Step 4: Create a test Price Market
  console.log("\n💰 Step 4: Creating test Price Market...");
  const priceDescription = "Will ETH price be above $5,000 on December 31, 2024?";
  const targetPrice = 5000_00000000; // $5,000 (scaled by 1e8)
  
  const tx2 = await marketFactory.createMarket(
    1, // MarketType.Price
    priceDescription,
    commitmentDuration,
    eventDuration,
    priceOracleAddress,
    0, // Asset.ETH
    targetPrice
  );
  await tx2.wait();
  
  const priceMarketAddress = await marketFactory.markets(1);
  console.log(`✅ Price Market created: ${priceMarketAddress}`);
  console.log(`   Description: ${priceDescription}`);
  console.log(`   Target Asset: ETH`);
  console.log(`   Target Price: $${(targetPrice / 1e8).toLocaleString()}`);
  console.log("━".repeat(60));

  // Step 5: Save deployment info
  console.log("\n💾 Step 5: Saving deployment info...");
  
  const deploymentInfo = {
    network: (await ethers.provider.getNetwork()).name,
    chainId: Number((await ethers.provider.getNetwork()).chainId),
    deployer: deployer.address,
    contracts: {
      priceOracle: priceOracleAddress,
      marketFactory: factoryAddress,
    },
    testMarkets: {
      eventMarket: eventMarketAddress,
      priceMarket: priceMarketAddress,
    },
    deploymentTime: new Date().toISOString(),
  };

  // Save to root directory
  const deploymentPath = path.join(__dirname, "../DEPLOYMENT_INFO.json");
  fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
  console.log(`✅ Saved deployment info to: ${deploymentPath}`);

  // Step 6: Update frontend config
  console.log("\n🔧 Step 6: Updating frontend config...");
  const configPath = path.join(__dirname, "../frontend/src/config.ts");
  
  const configContent = `// Contract Configuration
// Auto-generated by deployment script

export const CONTRACT_CONFIG = {
  factoryAddress: '${factoryAddress}',
  priceOracleAddress: '${priceOracleAddress}',
  chainId: ${Number((await ethers.provider.getNetwork()).chainId)},
  chainName: '${(await ethers.provider.getNetwork()).name}',
};

// Test Markets (for development)
export const TEST_MARKETS = {
  eventMarket: '${eventMarketAddress}',
  priceMarket: '${priceMarketAddress}',
};
`;

  fs.writeFileSync(configPath, configContent);
  console.log(`✅ Updated frontend config: ${configPath}`);

  // Step 7: Generate ABIs
  console.log("\n📄 Step 7: Generating ABIs...");
  
  // Read compiled artifacts
  const BlindOracleArtifact = JSON.parse(
    fs.readFileSync(
      path.join(__dirname, "../artifacts/contracts/BlindOracle.sol/BlindOracle.json"),
      "utf-8"
    )
  );
  
  const MarketFactoryArtifact = JSON.parse(
    fs.readFileSync(
      path.join(__dirname, "../artifacts/contracts/MarketFactory.sol/MarketFactory.json"),
      "utf-8"
    )
  );
  
  const PriceOracleArtifact = JSON.parse(
    fs.readFileSync(
      path.join(__dirname, "../artifacts/contracts/PriceOracle.sol/PriceOracle.json"),
      "utf-8"
    )
  );

  // Save ABIs to frontend
  const frontendAbiPath = path.join(__dirname, "../frontend/src");
  
  fs.writeFileSync(
    path.join(frontendAbiPath, "BlindOracleABI.json"),
    JSON.stringify({ abi: BlindOracleArtifact.abi }, null, 2)
  );
  
  fs.writeFileSync(
    path.join(frontendAbiPath, "MarketFactoryABI.json"),
    JSON.stringify({ abi: MarketFactoryArtifact.abi }, null, 2)
  );
  
  fs.writeFileSync(
    path.join(frontendAbiPath, "PriceOracleABI.json"),
    JSON.stringify({ abi: PriceOracleArtifact.abi }, null, 2)
  );

  console.log(`✅ Saved ABIs to: ${frontendAbiPath}`);
  console.log("   - BlindOracleABI.json");
  console.log("   - MarketFactoryABI.json");
  console.log("   - PriceOracleABI.json");
  console.log("━".repeat(60));

  // Final summary
  console.log("\n🎉 Deployment Complete!");
  console.log("━".repeat(60));
  console.log("\n📋 Contract Addresses:");
  console.log(`  PriceOracle:    ${priceOracleAddress}`);
  console.log(`  MarketFactory:  ${factoryAddress}`);
  console.log(`  Event Market:   ${eventMarketAddress}`);
  console.log(`  Price Market:   ${priceMarketAddress}`);
  
  console.log("\n📋 Next Steps:");
  console.log("1. Frontend config has been updated automatically");
  console.log("2. ABIs have been generated and saved");
  console.log("3. Start the frontend: cd frontend && npm run dev");
  console.log("4. Connect your wallet to the correct network");
  console.log("5. Test creating markets and submitting predictions");
  
  console.log("\n💡 Tips:");
  console.log("- Use the Event Market to test manual settlement");
  console.log("- Use the Price Market to test automatic settlement");
  console.log("- Update prices using: priceOracle.updatePrice(asset, price)");
  console.log("\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

