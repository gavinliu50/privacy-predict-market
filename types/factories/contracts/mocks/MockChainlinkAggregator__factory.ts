/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockChainlinkAggregator,
  MockChainlinkAggregatorInterface,
} from "../../../contracts/mocks/MockChainlinkAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "initialPrice",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId_",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "setUpdatedAt",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50604051610336380380610336833981016040819052602b916055565b5f91909155600180546001600160581b03191660ff90921691909117610100179055426002556086565b5f5f604083850312156065575f5ffd5b82519150602083015160ff81168114607b575f5ffd5b809150509250929050565b6102a3806100935f395ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c80637284e416116100585780637284e416146100bc5780639a6fc8f5146100fb578063f7a3080614610150578063feaf968c14610163575f5ffd5b80631ecc7d881461007e578063313ce5671461009357806354fd4d50146100ad575b5f5ffd5b61009161008c3660046101de565b600255565b005b60015460405160ff90911681526020015b60405180910390f35b604051600181526020016100a4565b604080518082018252600f81527f4d6f636b20507269636520466565640000000000000000000000000000000000602082015290516100a491906101f5565b61011961010936600461022a565b5f54600254919290919081908490565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100a4565b61009161015e3660046101de565b610185565b6001545f5460025461010090920469ffffffffffffffffffff16918083610119565b5f81905560018054610100900469ffffffffffffffffffff1690806101a98361025a565b91906101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550504260028190555050565b5f602082840312156101ee575f5ffd5b5035919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f6020828403121561023a575f5ffd5b813569ffffffffffffffffffff81168114610253575f5ffd5b9392505050565b5f69ffffffffffffffffffff821669ffffffffffffffffffff810361028d57634e487b7160e01b5f52601160045260245ffd5b6001019291505056fea164736f6c634300081b000a";

type MockChainlinkAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlinkAggregator__factory extends ContractFactory {
  constructor(...args: MockChainlinkAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialPrice: BigNumberish,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialPrice, decimals_, overrides || {});
  }
  override deploy(
    initialPrice: BigNumberish,
    decimals_: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialPrice, decimals_, overrides || {}) as Promise<
      MockChainlinkAggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockChainlinkAggregator__factory {
    return super.connect(runner) as MockChainlinkAggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkAggregatorInterface {
    return new Interface(_abi) as MockChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockChainlinkAggregator;
  }
}
