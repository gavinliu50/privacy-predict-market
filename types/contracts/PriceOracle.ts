/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PRICE_AGE"
      | "addUpdater"
      | "getPrice"
      | "getPriceUnsafe"
      | "isPriceAboveTarget"
      | "isPriceFresh"
      | "isUpdater"
      | "owner"
      | "prices"
      | "removeUpdater"
      | "updatePrice"
      | "updatePrices"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PriceUpdated" | "UpdaterAdded" | "UpdaterRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRICE_AGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceUnsafe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceAboveTarget",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceFresh",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values: [BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRICE_AGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceAboveTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceFresh",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    asset: BigNumberish,
    price: BigNumberish,
    timestamp: BigNumberish,
    updater: AddressLike
  ];
  export type OutputTuple = [
    asset: bigint,
    price: bigint,
    timestamp: bigint,
    updater: string
  ];
  export interface OutputObject {
    asset: bigint;
    price: bigint;
    timestamp: bigint;
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdaterAddedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdaterRemovedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PriceOracle;
  waitForDeployment(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PRICE_AGE: TypedContractMethod<[], [bigint], "view">;

  addUpdater: TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;

  getPrice: TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;

  getPriceUnsafe: TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;

  isPriceAboveTarget: TypedContractMethod<
    [asset: BigNumberish, targetPrice: BigNumberish],
    [boolean],
    "view"
  >;

  isPriceFresh: TypedContractMethod<[asset: BigNumberish], [boolean], "view">;

  isUpdater: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  prices: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        price: bigint;
        timestamp: bigint;
        updater: string;
      }
    ],
    "view"
  >;

  removeUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [asset: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrices: TypedContractMethod<
    [assets: BigNumberish[], newPrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PRICE_AGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceUnsafe"
  ): TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPriceAboveTarget"
  ): TypedContractMethod<
    [asset: BigNumberish, targetPrice: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPriceFresh"
  ): TypedContractMethod<[asset: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isUpdater"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prices"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        price: bigint;
        timestamp: bigint;
        updater: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [asset: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePrices"
  ): TypedContractMethod<
    [assets: BigNumberish[], newPrices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdaterAdded"
  ): TypedContractEvent<
    UpdaterAddedEvent.InputTuple,
    UpdaterAddedEvent.OutputTuple,
    UpdaterAddedEvent.OutputObject
  >;
  getEvent(
    key: "UpdaterRemoved"
  ): TypedContractEvent<
    UpdaterRemovedEvent.InputTuple,
    UpdaterRemovedEvent.OutputTuple,
    UpdaterRemovedEvent.OutputObject
  >;

  filters: {
    "PriceUpdated(uint8,uint256,uint256,address)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "UpdaterAdded(address)": TypedContractEvent<
      UpdaterAddedEvent.InputTuple,
      UpdaterAddedEvent.OutputTuple,
      UpdaterAddedEvent.OutputObject
    >;
    UpdaterAdded: TypedContractEvent<
      UpdaterAddedEvent.InputTuple,
      UpdaterAddedEvent.OutputTuple,
      UpdaterAddedEvent.OutputObject
    >;

    "UpdaterRemoved(address)": TypedContractEvent<
      UpdaterRemovedEvent.InputTuple,
      UpdaterRemovedEvent.OutputTuple,
      UpdaterRemovedEvent.OutputObject
    >;
    UpdaterRemoved: TypedContractEvent<
      UpdaterRemovedEvent.InputTuple,
      UpdaterRemovedEvent.OutputTuple,
      UpdaterRemovedEvent.OutputObject
    >;
  };
}
