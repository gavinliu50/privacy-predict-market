/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ChainlinkPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_PRICE_AGE"
      | "getPrice"
      | "getPriceFeed"
      | "getPriceWithMetadata"
      | "isPriceAboveTarget"
      | "isPriceFeedAvailable"
      | "owner"
      | "priceFeeds"
      | "transferOwnership"
      | "updatePriceFeed"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_PRICE_AGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceWithMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceAboveTarget",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPriceFeedAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PRICE_AGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceAboveTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPriceFeedAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;
}

export namespace PriceFeedUpdatedEvent {
  export type InputTuple = [asset: BigNumberish, feedAddress: AddressLike];
  export type OutputTuple = [asset: bigint, feedAddress: string];
  export interface OutputObject {
    asset: bigint;
    feedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainlinkPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ChainlinkPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: ChainlinkPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_PRICE_AGE: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;

  getPriceFeed: TypedContractMethod<[asset: BigNumberish], [string], "view">;

  getPriceWithMetadata: TypedContractMethod<
    [asset: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        price: bigint;
        timestamp: bigint;
        decimals: bigint;
        description: string;
      }
    ],
    "view"
  >;

  isPriceAboveTarget: TypedContractMethod<
    [asset: BigNumberish, targetPrice: BigNumberish],
    [boolean],
    "view"
  >;

  isPriceFeedAvailable: TypedContractMethod<
    [asset: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceFeeds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePriceFeed: TypedContractMethod<
    [asset: BigNumberish, feedAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_PRICE_AGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [asset: BigNumberish],
    [[bigint, bigint] & { price: bigint; timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceFeed"
  ): TypedContractMethod<[asset: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPriceWithMetadata"
  ): TypedContractMethod<
    [asset: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        price: bigint;
        timestamp: bigint;
        decimals: bigint;
        description: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPriceAboveTarget"
  ): TypedContractMethod<
    [asset: BigNumberish, targetPrice: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPriceFeedAvailable"
  ): TypedContractMethod<[asset: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceFeeds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePriceFeed"
  ): TypedContractMethod<
    [asset: BigNumberish, feedAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PriceFeedUpdated"
  ): TypedContractEvent<
    PriceFeedUpdatedEvent.InputTuple,
    PriceFeedUpdatedEvent.OutputTuple,
    PriceFeedUpdatedEvent.OutputObject
  >;

  filters: {
    "PriceFeedUpdated(uint8,address)": TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
    PriceFeedUpdated: TypedContractEvent<
      PriceFeedUpdatedEvent.InputTuple,
      PriceFeedUpdatedEvent.OutputTuple,
      PriceFeedUpdatedEvent.OutputObject
    >;
  };
}
