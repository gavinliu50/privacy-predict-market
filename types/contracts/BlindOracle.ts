/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlindOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHALLENGE_PERIOD"
      | "aggregateBets"
      | "callbackAggregateDecryption"
      | "callbackClaimRewards"
      | "challengeSettlement"
      | "claimRewards"
      | "commitPrediction"
      | "commitmentDeadline"
      | "currentPhase"
      | "depositOwnerStake"
      | "eventDeadline"
      | "eventDescription"
      | "finalOutcome"
      | "finalizeSettlement"
      | "getBalance"
      | "getMarketInfo"
      | "getMyCommitment"
      | "getParticipant"
      | "getParticipantCount"
      | "getPriceMarketInfo"
      | "getSettlementInfo"
      | "getUserCommitment"
      | "hasClaimed"
      | "hasUserCommitted"
      | "isAggregated"
      | "isSettled"
      | "isSettlementProposed"
      | "marketType"
      | "owner"
      | "ownerStake"
      | "participants"
      | "priceOracle"
      | "proposeSettlement"
      | "proposedOutcome"
      | "protocolId"
      | "requestAggregateDecryption"
      | "settlePriceMarket"
      | "settlementProposedTime"
      | "targetAsset"
      | "targetPrice"
      | "totalNoAmount"
      | "totalYesAmount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AggregationStarted"
      | "ClaimRequested"
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "MarketCreated"
      | "MarketSettled"
      | "OwnerStakeDeposited"
      | "OwnerStakeReturned"
      | "OwnerStakeSlashed"
      | "PhaseTransitioned"
      | "PredictionCommitted"
      | "PriceDiscovered"
      | "RewardsClaimed"
      | "SettlementChallenged"
      | "SettlementProposed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateBets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackAggregateDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackClaimRewards",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "challengeSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitPrediction",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositOwnerStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventDescription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalOutcome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMyCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceMarketInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCommitment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserCommitted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAggregated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSettled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isSettlementProposed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSettlement",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedOutcome",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAggregateDecryption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlePriceMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlementProposedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalNoAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalYesAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackAggregateDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackClaimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOwnerStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAggregated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSettled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedOutcome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestAggregateDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePriceMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementProposedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNoAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalYesAmount",
    data: BytesLike
  ): Result;
}

export namespace AggregationStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRequestedEvent {
  export type InputTuple = [user: AddressLike, requestId: BigNumberish];
  export type OutputTuple = [user: string, requestId: bigint];
  export interface OutputObject {
    user: string;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    eventDescription: string,
    commitmentDeadline: BigNumberish,
    eventDeadline: BigNumberish
  ];
  export type OutputTuple = [
    eventDescription: string,
    commitmentDeadline: bigint,
    eventDeadline: bigint
  ];
  export interface OutputObject {
    eventDescription: string;
    commitmentDeadline: bigint;
    eventDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketSettledEvent {
  export type InputTuple = [outcome: boolean];
  export type OutputTuple = [outcome: boolean];
  export interface OutputObject {
    outcome: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerStakeDepositedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerStakeReturnedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerStakeSlashedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseTransitionedEvent {
  export type InputTuple = [newPhase: BigNumberish];
  export type OutputTuple = [newPhase: bigint];
  export interface OutputObject {
    newPhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionCommittedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDiscoveredEvent {
  export type InputTuple = [totalYes: BigNumberish, totalNo: BigNumberish];
  export type OutputTuple = [totalYes: bigint, totalNo: bigint];
  export interface OutputObject {
    totalYes: bigint;
    totalNo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementChallengedEvent {
  export type InputTuple = [challenger: AddressLike];
  export type OutputTuple = [challenger: string];
  export interface OutputObject {
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementProposedEvent {
  export type InputTuple = [outcome: boolean, challengeDeadline: BigNumberish];
  export type OutputTuple = [outcome: boolean, challengeDeadline: bigint];
  export interface OutputObject {
    outcome: boolean;
    challengeDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlindOracle extends BaseContract {
  connect(runner?: ContractRunner | null): BlindOracle;
  waitForDeployment(): Promise<this>;

  interface: BlindOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHALLENGE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  aggregateBets: TypedContractMethod<[], [void], "nonpayable">;

  callbackAggregateDecryption: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callbackClaimRewards: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  challengeSettlement: TypedContractMethod<[], [void], "nonpayable">;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  commitPrediction: TypedContractMethod<
    [
      encryptedPrediction: BytesLike,
      encryptedAmount: BytesLike,
      predictionProof: BytesLike,
      amountProof: BytesLike
    ],
    [void],
    "payable"
  >;

  commitmentDeadline: TypedContractMethod<[], [bigint], "view">;

  currentPhase: TypedContractMethod<[], [bigint], "view">;

  depositOwnerStake: TypedContractMethod<[], [void], "payable">;

  eventDeadline: TypedContractMethod<[], [bigint], "view">;

  eventDescription: TypedContractMethod<[], [string], "view">;

  finalOutcome: TypedContractMethod<[], [boolean], "view">;

  finalizeSettlement: TypedContractMethod<[], [void], "nonpayable">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getMarketInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        phase: bigint;
        _commitmentDeadline: bigint;
        _eventDeadline: bigint;
        _totalYes: bigint;
        _totalNo: bigint;
        _isSettled: boolean;
        _finalOutcome: boolean;
      }
    ],
    "view"
  >;

  getMyCommitment: TypedContractMethod<
    [],
    [[string, string] & { prediction: string; amount: string }],
    "view"
  >;

  getParticipant: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getParticipantCount: TypedContractMethod<[], [bigint], "view">;

  getPriceMarketInfo: TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint] & {
        _marketType: bigint;
        _priceOracle: string;
        _targetAsset: bigint;
        _targetPrice: bigint;
      }
    ],
    "view"
  >;

  getSettlementInfo: TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint, bigint, boolean] & {
        _isSettlementProposed: boolean;
        _proposedOutcome: boolean;
        _settlementProposedTime: bigint;
        _challengeDeadline: bigint;
        _ownerStake: bigint;
        _canFinalize: boolean;
      }
    ],
    "view"
  >;

  getUserCommitment: TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, boolean] & {
        encryptedPrediction: string;
        encryptedAmount: string;
        hasCommitted: boolean;
      }
    ],
    "view"
  >;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasUserCommitted: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  isAggregated: TypedContractMethod<[], [boolean], "view">;

  isSettled: TypedContractMethod<[], [boolean], "view">;

  isSettlementProposed: TypedContractMethod<[], [boolean], "view">;

  marketType: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerStake: TypedContractMethod<[], [bigint], "view">;

  participants: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  priceOracle: TypedContractMethod<[], [string], "view">;

  proposeSettlement: TypedContractMethod<
    [outcome: boolean],
    [void],
    "nonpayable"
  >;

  proposedOutcome: TypedContractMethod<[], [boolean], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestAggregateDecryption: TypedContractMethod<[], [void], "nonpayable">;

  settlePriceMarket: TypedContractMethod<[], [void], "nonpayable">;

  settlementProposedTime: TypedContractMethod<[], [bigint], "view">;

  targetAsset: TypedContractMethod<[], [bigint], "view">;

  targetPrice: TypedContractMethod<[], [bigint], "view">;

  totalNoAmount: TypedContractMethod<[], [bigint], "view">;

  totalYesAmount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHALLENGE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "aggregateBets"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "callbackAggregateDecryption"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callbackClaimRewards"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "challengeSettlement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "commitPrediction"
  ): TypedContractMethod<
    [
      encryptedPrediction: BytesLike,
      encryptedAmount: BytesLike,
      predictionProof: BytesLike,
      amountProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "commitmentDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentPhase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositOwnerStake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "eventDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eventDescription"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalOutcome"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "finalizeSettlement"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {
        phase: bigint;
        _commitmentDeadline: bigint;
        _eventDeadline: bigint;
        _totalYes: bigint;
        _totalNo: bigint;
        _isSettled: boolean;
        _finalOutcome: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyCommitment"
  ): TypedContractMethod<
    [],
    [[string, string] & { prediction: string; amount: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParticipant"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getParticipantCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceMarketInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, bigint, bigint] & {
        _marketType: bigint;
        _priceOracle: string;
        _targetAsset: bigint;
        _targetPrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettlementInfo"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, bigint, bigint, bigint, boolean] & {
        _isSettlementProposed: boolean;
        _proposedOutcome: boolean;
        _settlementProposedTime: bigint;
        _challengeDeadline: bigint;
        _ownerStake: bigint;
        _canFinalize: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCommitment"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [string, string, boolean] & {
        encryptedPrediction: string;
        encryptedAmount: string;
        hasCommitted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasUserCommitted"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAggregated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSettled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSettlementProposed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "participants"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeSettlement"
  ): TypedContractMethod<[outcome: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposedOutcome"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestAggregateDecryption"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlePriceMarket"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlementProposedTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetAsset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalNoAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalYesAmount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AggregationStarted"
  ): TypedContractEvent<
    AggregationStartedEvent.InputTuple,
    AggregationStartedEvent.OutputTuple,
    AggregationStartedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRequested"
  ): TypedContractEvent<
    ClaimRequestedEvent.InputTuple,
    ClaimRequestedEvent.OutputTuple,
    ClaimRequestedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketSettled"
  ): TypedContractEvent<
    MarketSettledEvent.InputTuple,
    MarketSettledEvent.OutputTuple,
    MarketSettledEvent.OutputObject
  >;
  getEvent(
    key: "OwnerStakeDeposited"
  ): TypedContractEvent<
    OwnerStakeDepositedEvent.InputTuple,
    OwnerStakeDepositedEvent.OutputTuple,
    OwnerStakeDepositedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerStakeReturned"
  ): TypedContractEvent<
    OwnerStakeReturnedEvent.InputTuple,
    OwnerStakeReturnedEvent.OutputTuple,
    OwnerStakeReturnedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerStakeSlashed"
  ): TypedContractEvent<
    OwnerStakeSlashedEvent.InputTuple,
    OwnerStakeSlashedEvent.OutputTuple,
    OwnerStakeSlashedEvent.OutputObject
  >;
  getEvent(
    key: "PhaseTransitioned"
  ): TypedContractEvent<
    PhaseTransitionedEvent.InputTuple,
    PhaseTransitionedEvent.OutputTuple,
    PhaseTransitionedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionCommitted"
  ): TypedContractEvent<
    PredictionCommittedEvent.InputTuple,
    PredictionCommittedEvent.OutputTuple,
    PredictionCommittedEvent.OutputObject
  >;
  getEvent(
    key: "PriceDiscovered"
  ): TypedContractEvent<
    PriceDiscoveredEvent.InputTuple,
    PriceDiscoveredEvent.OutputTuple,
    PriceDiscoveredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementChallenged"
  ): TypedContractEvent<
    SettlementChallengedEvent.InputTuple,
    SettlementChallengedEvent.OutputTuple,
    SettlementChallengedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementProposed"
  ): TypedContractEvent<
    SettlementProposedEvent.InputTuple,
    SettlementProposedEvent.OutputTuple,
    SettlementProposedEvent.OutputObject
  >;

  filters: {
    "AggregationStarted()": TypedContractEvent<
      AggregationStartedEvent.InputTuple,
      AggregationStartedEvent.OutputTuple,
      AggregationStartedEvent.OutputObject
    >;
    AggregationStarted: TypedContractEvent<
      AggregationStartedEvent.InputTuple,
      AggregationStartedEvent.OutputTuple,
      AggregationStartedEvent.OutputObject
    >;

    "ClaimRequested(address,uint256)": TypedContractEvent<
      ClaimRequestedEvent.InputTuple,
      ClaimRequestedEvent.OutputTuple,
      ClaimRequestedEvent.OutputObject
    >;
    ClaimRequested: TypedContractEvent<
      ClaimRequestedEvent.InputTuple,
      ClaimRequestedEvent.OutputTuple,
      ClaimRequestedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "MarketCreated(string,uint256,uint256)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketSettled(bool)": TypedContractEvent<
      MarketSettledEvent.InputTuple,
      MarketSettledEvent.OutputTuple,
      MarketSettledEvent.OutputObject
    >;
    MarketSettled: TypedContractEvent<
      MarketSettledEvent.InputTuple,
      MarketSettledEvent.OutputTuple,
      MarketSettledEvent.OutputObject
    >;

    "OwnerStakeDeposited(uint256)": TypedContractEvent<
      OwnerStakeDepositedEvent.InputTuple,
      OwnerStakeDepositedEvent.OutputTuple,
      OwnerStakeDepositedEvent.OutputObject
    >;
    OwnerStakeDeposited: TypedContractEvent<
      OwnerStakeDepositedEvent.InputTuple,
      OwnerStakeDepositedEvent.OutputTuple,
      OwnerStakeDepositedEvent.OutputObject
    >;

    "OwnerStakeReturned(uint256)": TypedContractEvent<
      OwnerStakeReturnedEvent.InputTuple,
      OwnerStakeReturnedEvent.OutputTuple,
      OwnerStakeReturnedEvent.OutputObject
    >;
    OwnerStakeReturned: TypedContractEvent<
      OwnerStakeReturnedEvent.InputTuple,
      OwnerStakeReturnedEvent.OutputTuple,
      OwnerStakeReturnedEvent.OutputObject
    >;

    "OwnerStakeSlashed(uint256)": TypedContractEvent<
      OwnerStakeSlashedEvent.InputTuple,
      OwnerStakeSlashedEvent.OutputTuple,
      OwnerStakeSlashedEvent.OutputObject
    >;
    OwnerStakeSlashed: TypedContractEvent<
      OwnerStakeSlashedEvent.InputTuple,
      OwnerStakeSlashedEvent.OutputTuple,
      OwnerStakeSlashedEvent.OutputObject
    >;

    "PhaseTransitioned(uint8)": TypedContractEvent<
      PhaseTransitionedEvent.InputTuple,
      PhaseTransitionedEvent.OutputTuple,
      PhaseTransitionedEvent.OutputObject
    >;
    PhaseTransitioned: TypedContractEvent<
      PhaseTransitionedEvent.InputTuple,
      PhaseTransitionedEvent.OutputTuple,
      PhaseTransitionedEvent.OutputObject
    >;

    "PredictionCommitted(address)": TypedContractEvent<
      PredictionCommittedEvent.InputTuple,
      PredictionCommittedEvent.OutputTuple,
      PredictionCommittedEvent.OutputObject
    >;
    PredictionCommitted: TypedContractEvent<
      PredictionCommittedEvent.InputTuple,
      PredictionCommittedEvent.OutputTuple,
      PredictionCommittedEvent.OutputObject
    >;

    "PriceDiscovered(uint256,uint256)": TypedContractEvent<
      PriceDiscoveredEvent.InputTuple,
      PriceDiscoveredEvent.OutputTuple,
      PriceDiscoveredEvent.OutputObject
    >;
    PriceDiscovered: TypedContractEvent<
      PriceDiscoveredEvent.InputTuple,
      PriceDiscoveredEvent.OutputTuple,
      PriceDiscoveredEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "SettlementChallenged(address)": TypedContractEvent<
      SettlementChallengedEvent.InputTuple,
      SettlementChallengedEvent.OutputTuple,
      SettlementChallengedEvent.OutputObject
    >;
    SettlementChallenged: TypedContractEvent<
      SettlementChallengedEvent.InputTuple,
      SettlementChallengedEvent.OutputTuple,
      SettlementChallengedEvent.OutputObject
    >;

    "SettlementProposed(bool,uint256)": TypedContractEvent<
      SettlementProposedEvent.InputTuple,
      SettlementProposedEvent.OutputTuple,
      SettlementProposedEvent.OutputObject
    >;
    SettlementProposed: TypedContractEvent<
      SettlementProposedEvent.InputTuple,
      SettlementProposedEvent.OutputTuple,
      SettlementProposedEvent.OutputObject
    >;
  };
}
