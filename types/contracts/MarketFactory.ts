/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MarketFactory {
  export type MarketInfoStruct = {
    marketAddress: AddressLike;
    creator: AddressLike;
    description: string;
    commitmentDeadline: BigNumberish;
    eventDeadline: BigNumberish;
    createdAt: BigNumberish;
    isActive: boolean;
    marketType: BigNumberish;
  };

  export type MarketInfoStructOutput = [
    marketAddress: string,
    creator: string,
    description: string,
    commitmentDeadline: bigint,
    eventDeadline: bigint,
    createdAt: bigint,
    isActive: boolean,
    marketType: bigint
  ] & {
    marketAddress: string;
    creator: string;
    description: string;
    commitmentDeadline: bigint;
    eventDeadline: bigint;
    createdAt: bigint;
    isActive: boolean;
    marketType: bigint;
  };
}

export interface MarketFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createMarket"
      | "creatorMarkets"
      | "getMarket"
      | "getMarketCount"
      | "getMarketInfo"
      | "getMarkets"
      | "getMultipleMarketInfos"
      | "getUserMarketCount"
      | "getUserMarkets"
      | "isValidMarket"
      | "marketInfo"
      | "markets"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorMarkets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultipleMarketInfos",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarketCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultipleMarketInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    marketAddress: AddressLike,
    creator: AddressLike,
    description: string,
    marketType: BigNumberish,
    commitmentDuration: BigNumberish,
    eventDuration: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    marketAddress: string,
    creator: string,
    description: string,
    marketType: bigint,
    commitmentDuration: bigint,
    eventDuration: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    marketAddress: string;
    creator: string;
    description: string;
    marketType: bigint;
    commitmentDuration: bigint;
    eventDuration: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MarketFactory;
  waitForDeployment(): Promise<this>;

  interface: MarketFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createMarket: TypedContractMethod<
    [
      _marketType: BigNumberish,
      _description: string,
      _commitmentDuration: BigNumberish,
      _eventDuration: BigNumberish,
      _priceOracle: AddressLike,
      _targetAsset: BigNumberish,
      _targetPrice: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  creatorMarkets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getMarket: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getMarketCount: TypedContractMethod<[], [bigint], "view">;

  getMarketInfo: TypedContractMethod<
    [marketAddress: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        creator: string;
        description: string;
        commitmentDeadline: bigint;
        eventDeadline: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getMarkets: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;

  getMultipleMarketInfos: TypedContractMethod<
    [marketAddresses: AddressLike[]],
    [MarketFactory.MarketInfoStructOutput[]],
    "view"
  >;

  getUserMarketCount: TypedContractMethod<
    [creator: AddressLike],
    [bigint],
    "view"
  >;

  getUserMarkets: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  isValidMarket: TypedContractMethod<
    [marketAddress: AddressLike],
    [boolean],
    "view"
  >;

  marketInfo: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        marketAddress: string;
        creator: string;
        description: string;
        commitmentDeadline: bigint;
        eventDeadline: bigint;
        createdAt: bigint;
        isActive: boolean;
        marketType: bigint;
      }
    ],
    "view"
  >;

  markets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      _marketType: BigNumberish,
      _description: string,
      _commitmentDuration: BigNumberish,
      _eventDuration: BigNumberish,
      _priceOracle: AddressLike,
      _targetAsset: BigNumberish,
      _targetPrice: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorMarkets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMarketInfo"
  ): TypedContractMethod<
    [marketAddress: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        creator: string;
        description: string;
        commitmentDeadline: bigint;
        eventDeadline: bigint;
        createdAt: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarkets"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultipleMarketInfos"
  ): TypedContractMethod<
    [marketAddresses: AddressLike[]],
    [MarketFactory.MarketInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMarketCount"
  ): TypedContractMethod<[creator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserMarkets"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "isValidMarket"
  ): TypedContractMethod<[marketAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketInfo"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, bigint] & {
        marketAddress: string;
        creator: string;
        description: string;
        commitmentDeadline: bigint;
        eventDeadline: bigint;
        createdAt: bigint;
        isActive: boolean;
        marketType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;

  filters: {
    "MarketCreated(address,address,string,uint8,uint256,uint256,uint256)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
  };
}
